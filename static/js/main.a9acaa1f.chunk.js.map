{"version":3,"sources":["ClockClassComponent.js","MyTodoComponent.js","CovidMainComponent.js","index.js"],"names":["React","Component","MyTodoComponent","props","state","pendingtaskList","completedTaskList","task","handleTaskTyping","bind","addItemToTask","markDone","event","console","log","target","value","this","setState","pendingtaskListCopy","completedTaskListCopy","i","length","splice","push","taskValue","currentTaskList","type","onChange","onClick","map","ReactDOM","render","document","getElementById"],"mappings":"8MAGkCA,IAAMC,U,MCuFzBC,E,kDArFX,WAAYC,GACX,IAAD,8BACI,cAAMA,IACDC,MAAQ,CACTC,gBAAkB,GAClBC,kBAAkB,GAClBC,KAAK,IAET,EAAKC,iBAAkB,EAAKA,iBAAiBC,KAAtB,gBACvB,EAAKC,cAAe,EAAKA,cAAcD,KAAnB,gBACpB,EAAKE,SAAU,EAAKA,SAASF,KAAd,gBATnB,E,6DAciBG,GAEbC,QAAQC,IAAIF,EAAMG,OAAOC,OACzBC,KAAKC,SAAS,CAACX,KAAKK,EAAMG,OAAOC,U,+BAG5BT,GAML,IAJA,IAAIY,EAAsBF,KAAKb,MAAMC,gBACjCe,EAAwBH,KAAKb,MAAME,kBAG/Be,EAAG,EAAEA,EAAEF,EAAoBG,OAAOD,IAEtC,GAAGF,EAAoBE,IAAId,EAC3B,CACIY,EAAoBI,OAAOF,EAAE,GAC7B,MAKRD,EAAsBI,KAAKjB,GAE3BU,KAAKC,SAAS,CACVZ,kBAAmBc,EACnBf,gBAAkBc,M,sCAOtB,IAAIM,EAAYR,KAAKb,MAAMG,KACvBmB,EAAkBT,KAAKb,MAAMC,gBAEjCqB,EAAgBF,KAAKC,GAErBR,KAAKC,SAAS,CACVX,KAAK,GACLF,gBAAkBqB,M,+BAKzB,IAAD,OACI,OACI,6BACI,uDACA,2BAAOC,KAAK,OAAOX,MAAOC,KAAKb,MAAMG,KAAMqB,SAAUX,KAAKT,mBAC1D,4BAAQqB,QAASZ,KAAKP,eAAtB,eACA,sDACI,4BACKO,KAAKb,MAAMC,gBAAgByB,KAAI,SAACvB,GAAD,OAC5B,4BAAKA,EACL,4BAAQsB,QAAS,kBAAK,EAAKlB,SAASJ,KAApC,eAGZ,iDACA,4BACSU,KAAKb,MAAME,kBAAkBwB,KAAI,SAACvB,GAAD,OAC9B,4BAAKA,EACL,4BAAQsB,QAAS,kBAAK,EAAKlB,SAASJ,KAApC,oB,GA/EEP,IAAMC,W,aCCHD,IAAMC,UCEvC8B,IAASC,OAAO,kBAAC,EAAD,MACHC,SAASC,eAAe,U","file":"static/js/main.a9acaa1f.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\nclass ClockClassComponent extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n\n        // this is my component's state, which i can use to update my UI\n        this.state={\n            date:new Date()\n        }\n\n        // state is immutable, meaning you can not do this : this.state.date = new Date(), you need to use setState()\n    }\n\n    // runs after render\n    componentDidMount()\n    {\n        this.intervalId = setInterval(\n            () => { this.ticktok() },1000);\n    }\n\n    // runs when component is lets say closed/destroyed or we go elsewhere, maybe to a new page....\n    componentWillUnmount()\n    {\n        // good for garbage collection\n        clearInterval(this.intervalId);\n    }\n\n    ticktok() {\n        // whenever state is changed or updated , render() is called again...\n        this.setState({\n            date:new Date()\n        });\n    }\n\n    //runs after constructor\n    render(){\n        return (      \n                <div>\n                    <h1>Hola! </h1>\n                    <h3>Time now is {this.state.date.toLocaleTimeString()}</h3>\n                </div>);\n    }\n\n}\n\nexport default ClockClassComponent;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nclass MyTodoComponent extends React.Component \n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            pendingtaskList : [],\n            completedTaskList:[],\n            task:''\n        }\n        this.handleTaskTyping =this.handleTaskTyping.bind(this);\n        this.addItemToTask =this.addItemToTask.bind(this);\n        this.markDone =this.markDone.bind(this);\n    \n    }\n    \n\n    handleTaskTyping(event)\n    {\n        console.log(event.target.value);\n        this.setState({task:event.target.value});\n    }\n\n    markDone(task)\n    {\n        let pendingtaskListCopy = this.state.pendingtaskList;\n        let completedTaskListCopy = this.state.completedTaskList;\n\n        // remove from existing task list\n        for(let i =0;i<pendingtaskListCopy.length;i++)\n        {\n            if(pendingtaskListCopy[i]==task)\n            {\n                pendingtaskListCopy.splice(i,1);\n                break;\n            }\n        }\n\n        // add to completed task list\n        completedTaskListCopy.push(task);\n        \n        this.setState({\n            completedTaskList: completedTaskListCopy,\n            pendingtaskList : pendingtaskListCopy\n        });\n    }\n\n    addItemToTask()\n    {\n\n        let taskValue = this.state.task;\n        let currentTaskList = this.state.pendingtaskList;\n\n        currentTaskList.push(taskValue);\n\n        this.setState({\n            task:'',\n            pendingtaskList : currentTaskList\n        });\n    }\n\n    render()\n    {\n        return (\n            <div>\n                <h1>Hi I am MyTodoComponent</h1>\n                <input type=\"text\" value={this.state.task} onChange={this.handleTaskTyping} />\n                <button onClick={this.addItemToTask}>Add to Task</button>\n                <h2> Pending Tasks So far </h2>\n                    <ul>\n                        {this.state.pendingtaskList.map((task)=>\n                            <li>{task}\n                            <button onClick={()=> this.markDone(task)}> done </button></li>\n                        )}\n                    </ul>\n                <h2> Completed Tasks </h2>\n                <ul>\n                        {this.state.completedTaskList.map((task)=>\n                            <li>{task}\n                            <button onClick={()=> this.markDone(task)}> done </button></li>\n                        )}\n                    </ul>\n            </div>\n            );\n    }    \n}\n\nexport default MyTodoComponent;","import React from 'react';\nimport './App.css';\n// import { BrowserRouter, Redirect, Link } from \"react-router-dom\";\n\nclass CovidMainComponent extends React.Component\n{\n\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            name:'',\n            email:'',\n            locality:'',\n            age:'',\n            id:'',\n            trackerList:[],\n            itemCount:0,\n            editMode:false\n            }\n    // this.goToMyTodoComponent = this.goToMyTodoComponent.bind(this);\n    }\n\n    \n    \n    // handleNameChange(event)\n    // {\n    //     this.setState({name:event.target.value});\n    // }\n\n    // handleEmailChange(event)\n    // {\n    //     this.setState({email:event.target.value});\n    // }\n\n    // handleLocalityChange(event)\n    // {\n    //     this.setState({locality:event.target.value});\n    // }\n\n    // handleAgeChange(event)\n    // {\n    //     let inputAge = event.target.value;\n    //     if(inputAge<0 || inputAge>120)\n    //     {\n    //         alert(\"only age between 0 and 120 are valid!!\");\n    //     }\n    //     else\n    //     {\n    //         this.setState({age:inputAge});\n    //     }\n        \n    // }\n\n    handleChange(event)\n    {\n        let name = event.target.name;\n        let value = event.target.value;\n\n        if(name==\"age\")\n        {\n            if(value<0||value>120)\n            {\n                alert(\"only age between 0 and 120 are valid!!\");\n            }\n        }\n\n        //shortcut code\n        this.setState({\n            [name]:value\n        });\n\n    }\n\n    storeValues()\n    {\n        let existingList = this.state.trackerList;\n\n\n        if(this.state.editMode==true)\n        {\n            //write logic to edit\n\n            existingList.map((row)=>{\n                if(row.id==this.state.id)\n                {\n                    row.name = this.state.name;\n                    row.email = this.state.email;\n                    row.age=this.state.age;\n                    row.locality=this.state.locality;\n                }\n            })\n\n            this.setState({\n                trackerList:existingList,\n                name:'',\n                email:'',\n                age:'',\n                locality:'',\n                editMode:false\n            });\n        }\n        else\n        {\n            //write logic to add\n            let row = {\n                id:this.state.itemCount,\n                name:this.state.name,\n                email:this.state.email,\n                locality:this.state.locality,\n                age:this.state.age\n            }\n    \n            existingList.push(row);\n    \n            this.setState(\n                {\n                    trackerList:existingList,\n                    name:'',\n                    email:'',\n                    age:'',\n                    locality:'',\n                    itemCount: this.state.itemCount + 1 \n                });\n\n                // this.setState({name:''});\n            // this.setState({email:''});\n            // this.setState({age:''});\n            // this.setState({locality:''});\n        }\n        \n\n        \n\n    }\n\n    deleteRow(idToDelete)\n    {\n        if(this.state.editMode==true)\n        {\n            alert(\"please let editing get over before pressing delete!\");\n        }\n        else\n        {\n            let existingList = this.state.trackerList;\n            existingList.splice(idToDelete,1);\n\n            this.setState(\n                {\n                    trackerList:existingList,\n                    itemCount: this.state.itemCount - 1 \n\n                }\n            )\n        }\n    }\n\n    EditRow(idToEdit)\n    {\n        this.state.trackerList.map((row)=>{\n                if(row.id==idToEdit)\n                {\n                    this.setState({\n                        name:row.name,\n                        email:row.email,\n                        age:row.age,\n                        locality:row.locality,\n                        id:row.id,\n                        editMode:true\n                    })\n                }\n        });\n    }\n\n    // goToMyTodoComponent()\n    // {\n    //     window.location.href = '/MyTodoComponent';\n    // }\n\n    render()\n    {\n        return (\n            <div>\n                {/* <button onClick={this.goToMyTodoComponent}>MyTodoComponent</button>\n                    <Link to=\"/MyTodoComponent\">goToMyTodoComponent</Link> */}\n                <h1>Covid Component</h1>\n                <input type=\"text\" name=\"name\" className=\"inputElement\" placeholder=\"name\" value={this.state.name} onChange={(event)=>this.handleChange(event)} />\n                <input type=\"email\" name=\"email\" className=\"inputElement\" placeholder=\"email\"  value={this.state.email} onChange={(event)=>this.handleChange(event)} />\n                <input type=\"text\" name=\"locality\" className=\"inputElement\" placeholder=\"locality\" value={this.state.locality} onChange={(event)=>this.handleChange(event)}  />\n                <input type=\"number\" name=\"age\" className=\"inputElement\" placeholder=\"age\"value={this.state.age} onChange={(event)=>this.handleChange(event)}  />\n                <button onClick={()=>this.storeValues()}>Store</button>\n\n                <h2>Stored Values are : </h2>\n                <ul>\n                {this.state.trackerList.map((row)=>\n                  <li>{row.name},{row.email},{row.locality},{row.age}\n                    <button onClick={()=>this.deleteRow(row.id)}>Delete</button>\n                    <button onClick={()=>this.EditRow(row.id)}>Edit</button></li>  )}\n                </ul>\n                    \n            </div>\n        );\n    }\n}\n\nexport default CovidMainComponent;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ClockClassComponent from './ClockClassComponent';\nimport MyTodoComponent from './MyTodoComponent';\nimport CovidMainComponent from './CovidMainComponent';\n\nReactDOM.render(<MyTodoComponent /> \n            ,document.getElementById('root'));"],"sourceRoot":""}